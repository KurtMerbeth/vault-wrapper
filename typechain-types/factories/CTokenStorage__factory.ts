/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { CTokenStorage, CTokenStorageInterface } from "../CTokenStorage";

const _abi = [
  {
    inputs: [],
    name: "accrualBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "borrowIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "comptroller",
    outputs: [
      {
        internalType: "contract ComptrollerInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingAdmin",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolSeizeShareMantissa",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "reserveFactorMantissa",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalBorrows",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalReserves",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061031a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80635fe3b5671161008c5780638f840ddd116100665780638f840ddd1461018f57806395d89b4114610198578063aa5af0fd146101a0578063f851a440146101a957600080fd5b80635fe3b567146101655780636752e702146101785780636c540baf1461018657600080fd5b806306fdde03146100d4578063173b9904146100f257806318160ddd146101095780632678224714610112578063313ce5671461013d57806347bd37181461015c575b600080fd5b6100dc6101c1565b6040516100e9919061025c565b60405180910390f35b6100fb60075481565b6040519081526020016100e9565b6100fb600c5481565b600454610125906001600160a01b031681565b6040516001600160a01b0390911681526020016100e9565b60035461014a9060ff1681565b60405160ff90911681526020016100e9565b6100fb600a5481565b600554610125906001600160a01b031681565b6100fb666379da05b6000081565b6100fb60085481565b6100fb600b5481565b6100dc61024f565b6100fb60095481565b6003546101259061010090046001600160a01b031681565b600180546101ce906102aa565b80601f01602080910402602001604051908101604052809291908181526020018280546101fa906102aa565b80156102475780601f1061021c57610100808354040283529160200191610247565b820191906000526020600020905b81548152906001019060200180831161022a57829003601f168201915b505050505081565b600280546101ce906102aa565b600060208083528351808285015260005b818110156102895785810183015185820160400152820161026d565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c908216806102be57607f821691505b6020821081036102de57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220581a5d357b54a7429869665b33120a90f6a2cf76ea4de3db6d17659c5b359b3c64736f6c63430008110033";

type CTokenStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CTokenStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CTokenStorage__factory extends ContractFactory {
  constructor(...args: CTokenStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CTokenStorage> {
    return super.deploy(overrides || {}) as Promise<CTokenStorage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CTokenStorage {
    return super.attach(address) as CTokenStorage;
  }
  connect(signer: Signer): CTokenStorage__factory {
    return super.connect(signer) as CTokenStorage__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CTokenStorageInterface {
    return new utils.Interface(_abi) as CTokenStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CTokenStorage {
    return new Contract(address, _abi, signerOrProvider) as CTokenStorage;
  }
}
