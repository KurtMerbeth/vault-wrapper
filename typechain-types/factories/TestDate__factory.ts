/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestDate, TestDateInterface } from "../TestDate";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "prefix",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "encodePrefixTimestamp",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "encodeTimestamp",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "testString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405260066080908152652a32b9ba32b960d11b60a052600090620000279082620000e1565b503480156200003557600080fd5b50620001ad565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200006757607f821691505b6020821081036200008857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620000dc57600081815260208120601f850160051c81016020861015620000b75750805b601f850160051c820191505b81811015620000d857828155600101620000c3565b5050505b505050565b81516001600160401b03811115620000fd57620000fd6200003c565b62000115816200010e845462000052565b846200008e565b602080601f8311600181146200014d5760008415620001345750858301515b600019600386901b1c1916600185901b178555620000d8565b600085815260208120601f198616915b828110156200017e578886015182559484019460019091019084016200015d565b50858210156200019d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610dc980620001bd6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806302542a8f146100465780636aec4af61461006f578063fb8f0f5914610082575b600080fd5b610059610054366004610b2b565b61008a565b6040516100669190610ba3565b60405180910390f35b61005961007d366004610bf1565b610161565b610059610200565b60606100cd84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250879350915061028e9050565b600080546100da90610c0a565b80601f016020809104026020016040519081016040528092919081815260200182805461010690610c0a565b80156101535780601f1061012857610100808354040283529160200191610153565b820191906000526020600020905b81548152906001019060200180831161013657829003601f168201915b505050505090509392505050565b606061016e8260006103d5565b6000805461017b90610c0a565b80601f01602080910402602001604051908101604052809291908181526020018280546101a790610c0a565b80156101f45780601f106101c9576101008083540402835291602001916101f4565b820191906000526020600020905b8154815290600101906020018083116101d757829003601f168201915b50505050509050919050565b6000805461020d90610c0a565b80601f016020809104026020016040519081016040528092919081815260200182805461023990610c0a565b80156102865780601f1061025b57610100808354040283529160200191610286565b820191906000526020600020905b81548152906001019060200180831161026957829003601f168201915b505050505081565b828160005b825181101561034557818382815181106102af576102af610c44565b602001015160f81c60f81b90808054806102c890610c0a565b80601f81036102e75783600052602060002060ff1984168155603f9350505b506002919091019091558154600116156103105790600052602060002090602091828204019190065b909190919091601f036101000a81548160ff02191690600160f81b84040217905550808061033d90610c70565b915050610293565b5080602d60f81b908080548061035a90610c0a565b80601f81036103795783600052602060002060ff1984168155603f9350505b506002919091019091558154600116156103a25790600052602060002090602091828204019190065b909190919091601f036101000a81548160ff02191690600160f81b840402179055506103ce8484610835565b5050505050565b80600080806103ef6103ea6201518088610c9f565b610843565b919450925090506000610403600a83610c9f565b905084610411826030610cb3565b60f81b908080548061042290610c0a565b80601f81036104415783600052602060002060ff1984168155603f9350505b5060029190910190915581546001161561046a5790600052602060002090602091828204019190065b909190919091601f036101000a81548160ff02191690600160f81b840402179055506000600a8361049b9190610cd2565b9050856104a9826030610cb3565b60f81b90808054806104ba90610c0a565b80601f81036104d95783600052602060002060ff1984168155603f9350505b506002919091019091558154600116156105025790600052602060002090602091828204019190065b909190919091601f036101000a81548160ff02191690600160f81b8404021790555050508160010361054b5761054684602560f91b604160f81b602760f91b6109b7565b6106ed565b8160020361056b5761054684602360f91b604560f81b602160f91b6109b7565b8160030361058b5761054684604d60f81b604160f81b602960f91b6109b7565b816004036105ab5761054684604160f81b600560fc1b602960f91b6109b7565b816005036105cb5761054684604d60f81b604160f81b605960f81b6109b7565b816006036105eb5761054684602560f91b605560f81b602760f91b6109b7565b8160070361060b5761054684602560f91b605560f81b601360fa1b6109b7565b8160080361062b5761054684604160f81b605560f81b604760f81b6109b7565b8160090361064b5761054684605360f81b604560f81b600560fc1b6109b7565b81600a0361066b5761054684604f60f81b604360f81b601560fa1b6109b7565b81600b0361068b5761054684602760f91b604f60f81b602b60f91b6109b7565b81600c036106ab5761054684601160fa1b604560f81b604360f81b6109b7565b60405162461bcd60e51b81526020600482015260136024820152723230ba32903232b1b7b234b7339032b93937b960691b604482015260640160405180910390fd5b60006106fa606485610cd2565b90506000610709600a83610c9f565b905085610717826030610cb3565b60f81b908080548061072890610c0a565b80601f81036107475783600052602060002060ff1984168155603f9350505b506002919091019091558154600116156107705790600052602060002090602091828204019190065b909190919091601f036101000a81548160ff02191690600160f81b840402179055506000600a836107a19190610cd2565b9050866107af826030610cb3565b60f81b90808054806107c090610c0a565b80601f81036107df5783600052602060002060ff1984168155603f9350505b506002919091019091558154600116156108085790600052602060002090602091828204019190065b909190919091601f036101000a81548160ff02191690600160f81b84040217905550505050505050505050565b61083f82826103d5565b5050565b60008080838162253d8c61085a8362010bd9610ce6565b6108649190610ce6565b9050600062023ab1610877836004610d0e565b6108819190610d3e565b905060046108928262023ab1610d0e565b61089d906003610ce6565b6108a79190610d3e565b6108b19083610d6c565b9150600062164b096108c4846001610ce6565b6108d090610fa0610d0e565b6108da9190610d3e565b905060046108ea826105b5610d0e565b6108f49190610d3e565b6108fe9084610d6c565b61090990601f610ce6565b9250600061098f61091b856050610d0e565b6109259190610d3e565b9050600060506109378361098f610d0e565b6109419190610d3e565b61094b9086610d6c565b9050610958600b83610d3e565b945061096585600c610d0e565b610970836002610ce6565b61097a9190610d6c565b91508483610989603187610d6c565b610994906064610d0e565b61099e9190610ce6565b6109a89190610ce6565b9a919950975095505050505050565b838390808054806109c790610c0a565b80601f81036109e65783600052602060002060ff1984168155603f9350505b50600291909101909155815460011615610a0f5790600052602060002090602091828204019190065b909190919091601f036101000a81548160ff02191690600160f81b8404021790555083829080805480610a4190610c0a565b80601f8103610a605783600052602060002060ff1984168155603f9350505b50600291909101909155815460011615610a895790600052602060002090602091828204019190065b909190919091601f036101000a81548160ff02191690600160f81b8404021790555083819080805480610abb90610c0a565b80601f8103610ada5783600052602060002060ff1984168155603f9350505b50600291909101909155815460011615610b035790600052602060002090602091828204019190065b909190919091601f036101000a81548160ff02191690600160f81b8404021790555050505050565b600080600060408486031215610b4057600080fd5b833567ffffffffffffffff80821115610b5857600080fd5b818601915086601f830112610b6c57600080fd5b813581811115610b7b57600080fd5b876020828501011115610b8d57600080fd5b6020928301989097509590910135949350505050565b600060208083528351808285015260005b81811015610bd057858101830151858201604001528201610bb4565b506000604082860101526040601f19601f8301168501019250505092915050565b600060208284031215610c0357600080fd5b5035919050565b600181811c90821680610c1e57607f821691505b602082108103610c3e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610c8257610c82610c5a565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610cae57610cae610c89565b500490565b60ff8181168382160190811115610ccc57610ccc610c5a565b92915050565b600082610ce157610ce1610c89565b500690565b8082018281126000831280158216821582161715610d0657610d06610c5a565b505092915050565b80820260008212600160ff1b84141615610d2a57610d2a610c5a565b8181058314821517610ccc57610ccc610c5a565b600082610d4d57610d4d610c89565b600160ff1b821460001984141615610d6757610d67610c5a565b500590565b8181036000831280158383131683831282161715610d8c57610d8c610c5a565b509291505056fea2646970667358221220e0d96ec3119584c46b353eb51939c1bfca220baf201654b39c05cbc50a3e0b1664736f6c63430008110033";

type TestDateConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestDateConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestDate__factory extends ContractFactory {
  constructor(...args: TestDateConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestDate> {
    return super.deploy(overrides || {}) as Promise<TestDate>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestDate {
    return super.attach(address) as TestDate;
  }
  connect(signer: Signer): TestDate__factory {
    return super.connect(signer) as TestDate__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestDateInterface {
    return new utils.Interface(_abi) as TestDateInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestDate {
    return new Contract(address, _abi, signerOrProvider) as TestDate;
  }
}
