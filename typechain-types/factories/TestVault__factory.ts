/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestVault, TestVaultInterface } from "../TestVault";

const _abi = [
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "pool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum TestVault.PoolSpecialization",
        name: "",
        type: "uint8",
      },
    ],
    name: "registerPool",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    name: "registerTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_pool",
        type: "address",
      },
    ],
    name: "setPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102e0806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806309b2760f1461007757806316f0115b146100b65780634437152a146100e157806366a9c7d214610113575b3660008037600080366000346000545af18061006c573d6000803e3d6000fd5b503d6000803e3d6000f35b6100a3610085366004610126565b50600080546001600160a01b03191633179055630307830360e41b90565b6040519081526020015b60405180910390f35b6000546100c9906001600160a01b031681565b6040516001600160a01b0390911681526020016100ad565b6101116100ef36600461016a565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b005b61011161012136600461023d565b505050565b60006020828403121561013857600080fd5b81356003811061014757600080fd5b9392505050565b80356001600160a01b038116811461016557600080fd5b919050565b60006020828403121561017c57600080fd5b6101478261014e565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126101ac57600080fd5b8135602067ffffffffffffffff808311156101c9576101c9610185565b8260051b604051601f19603f830116810181811084821117156101ee576101ee610185565b60405293845285810183019383810192508785111561020c57600080fd5b83870191505b84821015610232576102238261014e565b83529183019190830190610212565b979650505050505050565b60008060006060848603121561025257600080fd5b83359250602084013567ffffffffffffffff8082111561027157600080fd5b61027d8783880161019b565b9350604086013591508082111561029357600080fd5b506102a08682870161019b565b915050925092509256fea264697066735822122045001bbaed40af839b5ee8c9099da012b73d4d1876e6a7f4e5a6b5b16eadf4f864736f6c63430008110033";

type TestVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestVault__factory extends ContractFactory {
  constructor(...args: TestVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestVault> {
    return super.deploy(overrides || {}) as Promise<TestVault>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestVault {
    return super.attach(address) as TestVault;
  }
  connect(signer: Signer): TestVault__factory {
    return super.connect(signer) as TestVault__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestVaultInterface {
    return new utils.Interface(_abi) as TestVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestVault {
    return new Contract(address, _abi, signerOrProvider) as TestVault;
  }
}
